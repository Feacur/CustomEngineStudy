#include "custom_pch.h"
#include "engine/platform/platform_system.h"
#include "engine/debug/log.h"

#if !defined(CUSTOM_PRECOMPILED_HEADER)
	#include <Windows.h>
	#include <signal.h>
#endif

// https://github.com/Marzac/le3d/blob/master/engine/system_win.cpp

custom::System global_system;

static void platform_update();
static ULONGLONG platform_get_system_time();
static void signal_handler(int value);

//
// API implementation
//

namespace custom
{
	System::System()
		: is_running(true)
	{
		signal(SIGABRT, signal_handler);
		// signal(SIGFPE, SIG_DFL);
		// signal(SIGILL, SIG_DFL);
		signal(SIGINT, signal_handler);
		// signal(SIGSEGV, SIG_DFL);
		signal(SIGTERM, signal_handler);
	}

	System::~System() = default;

	void System::update()
	{
		platform_update();
	}

	u64 System::get_system_time()
	{
		ULONGLONG system_time = platform_get_system_time();
		return (u64)system_time;
	}
}

//
// platform implementation
//

static void platform_update() {
	MSG message = {};
	while (PeekMessage(&message, 0, 0, 0, PM_REMOVE)) {
		if (message.message == WM_QUIT) {
			// Indicates a request to terminate an application.
			global_system.is_running = false;
			break;
		}
		TranslateMessage(&message);
		DispatchMessage(&message);
	}
}

static ULONGLONG platform_get_system_time() {
	FILETIME file_time;
	GetSystemTimeAsFileTime(&file_time);

	ULARGE_INTEGER ularge_time;
	ularge_time.LowPart = file_time.dwLowDateTime;
	ularge_time.HighPart = file_time.dwHighDateTime;

	return ularge_time.QuadPart;
}

// http://www.cplusplus.com/reference/csignal/signal/
static void signal_handler(int value) {
	switch (value) {
		case SIGABRT: CUSTOM_ERROR("Abort signal");             break; // Abnormal termination, such as is initiated by the abort function.
		// case SIGFPE:  CUSTOM_ERROR("Floating-Point Exception"); break; // Erroneous arithmetic operation, such as zero divide or an operation resulting in overflow (not necessarily with a floating-point operation).
		// case SIGILL:  CUSTOM_ERROR("Illegal Instruction");      break; // Invalid function image, such as an illegal instruction. This is generally due to a corruption in the code or to an attempt to execute data.
		case SIGINT:  CUSTOM_ERROR("Interrupt signal");         break; // Interactive attention signal. Generally generated by the application user.
		// case SIGSEGV: CUSTOM_ERROR("Segmentation Violation");   break; // Invalid access to storage: When a program tries to read or write outside the memory it has allocated.
		case SIGTERM: CUSTOM_ERROR("Terminate signal");         break; // Termination request sent to program.
		default:      CUSTOM_ERROR("Unknown signal");           break; // ?
	}
	global_system.is_running = false;
}
